<?xml version="1.0"?>

<!--

  Ant build file for the entire nmica tree

  see:
  <a href="http://ant.apache.org/">Ant Project Homepage</a>

  author:  Thomas Down

  based on the biojava build.xml file by:
           Michael Heuer
           Keith James (JUnit support, DocBook support)
           Greg Cox (fixed documentation)

  portions Copyright (c) 1999-2000 The Apache Software Foundation.

-->

<project name="nmica-extra" default="all" basedir=".">
  <property environment="env" />

  <!-- <target name="all" depends="package-java,build-native,exec-bin" /> -->
  <target name="all" depends="package-java,exec-bin" />
	
  <!-- Checks environment and setup variables -->
  <target name="init" description="Checks environment and setup variables">
    <tstamp />
    <property name="version" value="0.8alpha" />

    <property name="build.compiler" value="modern" />

    <property name="bin.dir" value="./bin" />
    <property name="lib.dir" value="./lib" />
    <property name="src.main.dir" value="./src" />
    <property name="src.build.dir" value="./src-build" />
    <property name="native.dir" value="./native" />
    <property name="manifest.dir" value="./manifest" />
    <property name="resources.dir" value="./resources" />
    <property name="nmica.dev.home" value="${env.NMICA_DEV_HOME}" />
    <property name="nmica.home" value="${env.NMICA_HOME}" />
    <property name="classpath" value="${nmica.home}/lib/biojava.jar:${nmica.home}/lib/bytecode.jar:${nmica.home}/lib/bjv2-core-0.1.jar:${nmica.home}/lib/stax-api-1.0.1.jar:${nmica.home}/lib/colt.jar:${nmica.home}/lib/nmica.jar:${lib.dir}/biojava-ensembl.jar:${lib.dir}:${lib.dir}/sam-1.03.jar:${lib.dir}/picard-1.03.jar" />
 
    <!-- Main build directory -->
    <property name="build.dir" value="./ant-build" />
    <property name="build.classes.dir" value="${build.dir}/classes" />
    <property name="build.headers.dir" value="${build.dir}/headers" />

    <!-- Javac properties -->
    <property name="javac.depend" value="false" />
    <property name="javac.debug" value="true" />
    <property name="javac.deprecation" value="false" />
    <property name="javac.source" value="1.5" />

    <!-- Javadoc properties -->
    <property name="build.dest.docs" value="${build.dir}/docs" />
    <property name="build.dest.doccheck" value="${build.dir}/docs/check" />
    <property name="packages" value="net.*" />

    <!-- Subdirectories for main source and classes -->
    <property name="name.main" value="nmica-extra" />
    <property name="Name.main" value="NestedMICA-extra" />
    <property name="build.dest.main" value="${build.classes.dir}/${name.main}" />
    <property name="build.docs.main" value="${build.dest.docs}/${name.main}" />
    <property name="jar.main" value="${lib.dir}/${name.main}.jar" />
    <property name="manifest.file.main" value="${manifest.dir}/${name.main}.txt" />

    <!-- Subdirectories for build-time source and classes -->
    <property name="build.dest.build" value="${build.classes.dir}/build" />
        
    <!-- Look for ccs -->
    <available file="gcc" filepath="${env.PATH}" property="native.has_gcc" />
    <available file="icc" filepath="${env.PATH}" property="native.has_icc" />

    <!-- Echo information -->
    <echo message="Building ${name.main}-${version}" />
    <echo message="GCC available: ${native.has_gcc}" />
    <echo message="ICC available: ${native.has_icc}" />
    <echo message="Java         : ${env.JAVA_HOME}" />
    <echo message="Byte order: ${sun.cpu.endian} endian" />
    <echo message="${nmica.home}" />
  </target>


  <!--
    Prepare each part of the project.

    Each preparation creates working directories and copies files over.
  -->

  <!-- Prepares the basic stuff -->
  <target name="prepare" depends="init" description="creates basic directories">
    <!-- Creates directories -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.headers.dir}" />
    <mkdir dir="${bin.dir}" />
  </target>
  
  <!-- Prepares the source code -->
  <target name="prepare-java" depends="prepare" description="Prepares java source files">
    <!-- Creates directories -->
    <mkdir dir="${build.dest.main}" />
    <mkdir dir="${build.dest.build}" />
    <mkdir dir="${build.docs.main}" />
  </target>

  <!-- Prepares the javadocs -->
  <target name="prepare-javadocs" depends="prepare" description="Prepares the javadocs">
    <!-- Creates directories -->
    <mkdir dir="${build.dest.docs}" />
  </target>


  <target name="compile-bootstrap-java" depends="prepare-java" description="Compiles utilities required for building the main project">
    <javac
       destdir="${build.dest.build}"
       depend="${javac.depend}"
       deprecation="${javac.deprecation}"
       debug="${javac.debug}"
       srcdir="${src.build.dir}"
       fork="true"
       executable="apt">
      <classpath>
	<pathelement path="${classpath}" />
      </classpath>

      <filename name="net/derkholm/**/*.java" />
    </javac>
  </target>

  <!-- Compiles the source directory -->
  <target name="compile-java" depends="prepare-java,compile-bootstrap-java" description="Compiles the java source code">
    <apt
      destdir="${build.dest.main}"
      depend="${javac.depend}"
      deprecation="${javac.deprecation}"
      debug="${javac.debug}"
      srcdir="${src.main.dir}">
      <classpath>
        <pathelement path="${classpath}" />
	<pathelement path="${build.dest.build}" />
        <pathelement path="${src.build.dir}" /> <!-- To pick up META-INF/services.  Should go somewhere else really -->
      </classpath>

      <option name="launchpadDir" value="${bin.dir}" />
      
      <filename name="net/derkholm/**/*.java" />
    </apt>
  </target>

  <target name="build-native" depends="compile-java,native-headers,build-native-prep,compile-native,link-native-darwin,link-native-unix" description="Compiles the NestedMICA C library">
  </target>

  <target name="build-native-prep-icc" if="native.has_icc">
    <property name="native.cc" value="icc" />
    <property name="native.cc.optimization" value="-O3 -tpp7 -xW" />
    <property name="native.cc.libs" value="-lsvml" />
  </target>

  <target name="build-native-prep-gcc" unless="native.has_icc">
    <property name="native.cc" value="gcc" />
    <property name="native.cc.optimization" value="-O3" />
    <property name="native.cc.libs" value="-lm" />
  </target>

  <dirset id="jni-includes" dir="${env.JAVA_HOME}/include">
  </dirset>

  <target name="build-native-prep" depends="build-native-prep-icc,build-native-prep-gcc">
    <condition property="native.build.endian" value="NMICA_LITTLE_ENDIAN" else="NMICA_BIG_ENDIAN">
      <equals arg1="${sun.cpu.endian}" arg2="little" casesensitive="false" trim="true" />
    </condition>

    <condition property="native.darwin_linker">
      <os family="mac" />
    </condition>

    <condition property="native.pic" value="-fPIC" else="">
      <os arch="amd64" />
    </condition>

    <pathconvert property="tmp.native.include" dirsep="/" pathsep=" -I" refid="jni-includes" />

    <condition property="native.include" 
	       value="-I/System/Library/Frameworks/JavaVM.framework/Headers"
	       else="-I${tmp.native.include}">
      <os family="mac" />
    </condition>

    <property name="native.include.all" value="-I../ant-build/headers ${native.include}" />
  </target>

  <target name="compile-native">
    <echo message="Compiling native code" />
    <echo message="Include path: ${native.include.all}" />
    <apply executable="${native.cc}" dir="${native.dir}" relative="true" verbose="true" >
      <arg value="-c" />
      <arg value="-std=c99" />
      <arg line="${native.cc.optimization}" />
      <arg line="${native.pic}" />
      <arg line="${native.include.all}" />
      <arg value="-D${native.build.endian}" />
      <fileset dir="${native.dir}">
	<include name="*.c" />
      </fileset>
    </apply>
  </target>

  <target name="link-native-darwin" if="native.darwin_linker">
    <apply executable="${native.cc}" dir="${native.dir}" relative="true" parallel="true" verbose="true" >
      <arg value="-dynamiclib" />
      <arg value="-o" />
      <arg value="libnmica.jnilib" />
      <fileset dir="${native.dir}">
        <include name="*.o" />
      </fileset>
      <arg value="-framework JavaVM" />
    </apply>
  </target>

  <target name="link-native-unix" unless="native.darwin_linker">
    <property name="native.suffix" value="so" />

    <apply executable="${native.cc}" dir="${native.dir}" relative="true" parallel="true" verbose="true">
      <arg value="-shared" />
      <arg value="-o" />
      <arg value="libnmica.${native.suffix}" />
      <fileset dir="${native.dir}">
        <include name="*.o" />
      </fileset>
      <arg line="${native.cc.libs}" />
    </apply>
  </target>

  <!--
    Creates the .jar files containing each distributable component.

    This probably just jars up the .class files and any resources as well as
    a manifest for each distributable component.
  -->

  <!-- Creates the biojava package (tests are left in the parallel tree) -->
  
  <target name="package-java" depends="compile-java" description="create main class jar file">
    <jar
      jarfile="${jar.main}"
      manifest="${manifest.file.main}">
      <fileset dir="${build.dest.main}" />
      <fileset dir="${resources.dir}" />
    </jar>
  </target>

  <!-- Creates the API documentation -->
  <target name="javadocs" depends="prepare-java" description="Creates the API documentation">
    <javadoc
      packagenames="${packages}"
      sourcepath="${src.dir}"
      classpath="${classpath}"
      destdir="${build.docs.main}"
      author="true"
      version="true"
      use="true"
      source="1.4"
      windowtitle="${Name.main} API"
      doctitle="${Name.main}"
      maxmemory="96m">
       <link href="http://java.sun.com/j2se/1.4.2/docs/api/" offline="false" />
       <link href="http://www.derkholm.net/autobuild/latest-docs/docs/biojava/" offline="false" />
    </javadoc>
  </target>

  <target name="native-headers" depends="compile-java" description="Creates JNI header files for compiling the native code">
    <javah destdir="${build.headers.dir}" force="yes" classpath="${build.dest.main}">
      <class name="net.derkholm.nmica.maths.NativeMath" />
      <class name="net.derkholm.nmica.model.motif.MotifUncountedLikelihoodNative" />
      <class name="net.derkholm.nmica.model.motif.MotifUncountedClusterLikelihoodNative" />
    </javah>
  </target>


  <target name="exec-bin" description="Mark generated scripts in the bin directory as executable">
    <chmod perm="a+rx">
      <fileset dir="${bin.dir}" />
    </chmod>
  </target>

  <!-- Cleans everything -->
  <target name="clean" depends="init"
  description="Cleans everything">
    <delete dir="${build.dir}" />
  </target>
</project>
